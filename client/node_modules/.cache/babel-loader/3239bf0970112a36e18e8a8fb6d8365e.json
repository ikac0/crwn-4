{"ast":null,"code":"import _classCallCheck from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport LOG_LEVELS from './models/LogLevels.mjs';\nimport { WorkboxError } from './_private/WorkboxError.mjs';\nimport { cacheNames } from './_private/cacheNames.mjs';\nimport { logger } from './_private/logger.mjs';\nimport { assert } from './_private/assert.mjs';\nimport { checkSWFileCacheHeaders } from './_private/checkSWFileCacheHeaders.mjs';\nimport { setLoggerLevel, getLoggerLevel } from './_private/logger.mjs';\nimport './_version.mjs';\n/**\n * This class is never exposed publicly. Inidividual methods are exposed\n * using jsdoc alias commands.\n *\n * @memberof workbox.core\n * @private\n */\n\nvar WorkboxCore = /*#__PURE__*/function () {\n  /**\n   * You should not instantiate this object directly.\n   *\n   * @private\n   */\n  function WorkboxCore() {\n    _classCallCheck(this, WorkboxCore);\n\n    // Give our version strings something to hang off of.\n    try {\n      self.workbox.v = self.workbox.v || {};\n    } catch (err) {// NOOP\n    } // A WorkboxCore instance must be exported before we can use the logger.\n    // This is so it can get the current log level.\n\n\n    if (process.env.NODE_ENV !== 'production') {\n      var padding = '   ';\n      logger.groupCollapsed('Welcome to Workbox!');\n      logger.unprefixed.log(\"You are currently using a development build. \" + \"By default this will switch to prod builds when not on localhost. \" + \"You can force this with workbox.setConfig({debug: true|false}).\");\n      logger.unprefixed.log(\"\\uD83D\\uDCD6 Read the guides and documentation\\n\" + \"\".concat(padding, \"https://developers.google.com/web/tools/workbox/\"));\n      logger.unprefixed.log(\"\\u2753 Use the [workbox] tag on Stack Overflow to ask questions\\n\" + \"\".concat(padding, \"https://stackoverflow.com/questions/ask?tags=workbox\"));\n      logger.unprefixed.log(\"\\uD83D\\uDC1B Found a bug? Report it on GitHub\\n\" + \"\".concat(padding, \"https://github.com/GoogleChrome/workbox/issues/new\"));\n      logger.groupEnd();\n\n      if (typeof checkSWFileCacheHeaders === 'function') {\n        checkSWFileCacheHeaders();\n      }\n    }\n  }\n  /**\n   * Get the current cache names used by Workbox.\n   *\n   * `cacheNames.precache` is used for precached assets,\n   * `cacheNames.googleAnalytics` is used by `workbox-google-analytics` to\n   * store `analytics.js`,\n   * and `cacheNames.runtime` is used for everything else.\n   *\n   * @return {Object} An object with `precache` and `runtime` cache names.\n   *\n   * @alias workbox.core.cacheNames\n   */\n\n\n  _createClass(WorkboxCore, [{\n    key: \"setCacheNameDetails\",\n\n    /**\n     * You can alter the default cache names used by the Workbox modules by\n     * changing the cache name details.\n     *\n     * Cache names are generated as `<prefix>-<Cache Name>-<suffix>`.\n     *\n     * @param {Object} details\n     * @param {Object} details.prefix The string to add to the beginning of\n     * the precache and runtime cache names.\n     * @param {Object} details.suffix The string to add to the end of\n     * the precache and runtime cache names.\n     * @param {Object} details.precache The cache name to use for precache\n     * caching.\n     * @param {Object} details.runtime The cache name to use for runtime caching.\n     * @param {Object} details.googleAnalytics The cache name to use for\n     * `workbox-google-analytics` caching.\n     *\n     * @alias workbox.core.setCacheNameDetails\n     */\n    value: function setCacheNameDetails(details) {\n      if (process.env.NODE_ENV !== 'production') {\n        Object.keys(details).forEach(function (key) {\n          assert.isType(details[key], 'string', {\n            moduleName: 'workbox-core',\n            className: 'WorkboxCore',\n            funcName: 'setCacheNameDetails',\n            paramName: \"details.\".concat(key)\n          });\n        });\n\n        if ('precache' in details && details.precache.length === 0) {\n          throw new WorkboxError('invalid-cache-name', {\n            cacheNameId: 'precache',\n            value: details.precache\n          });\n        }\n\n        if ('runtime' in details && details.runtime.length === 0) {\n          throw new WorkboxError('invalid-cache-name', {\n            cacheNameId: 'runtime',\n            value: details.runtime\n          });\n        }\n\n        if ('googleAnalytics' in details && details.googleAnalytics.length === 0) {\n          throw new WorkboxError('invalid-cache-name', {\n            cacheNameId: 'googleAnalytics',\n            value: details.googleAnalytics\n          });\n        }\n      }\n\n      cacheNames.updateDetails(details);\n    }\n    /**\n     * Get the current log level.\n     *\n     * @return {number}.\n     *\n     * @alias workbox.core.logLevel\n     */\n\n  }, {\n    key: \"setLogLevel\",\n\n    /**\n     * Set the current log level passing in one of the values from\n     * [LOG_LEVELS]{@link module:workbox-core.LOG_LEVELS}.\n     *\n     * @param {number} newLevel The new log level to use.\n     *\n     * @alias workbox.core.setLogLevel\n     */\n    value: function setLogLevel(newLevel) {\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isType(newLevel, 'number', {\n          moduleName: 'workbox-core',\n          className: 'WorkboxCore',\n          funcName: 'logLevel [setter]',\n          paramName: \"logLevel\"\n        });\n      }\n\n      if (newLevel > LOG_LEVELS.silent || newLevel < LOG_LEVELS.debug) {\n        throw new WorkboxError('invalid-value', {\n          paramName: 'logLevel',\n          validValueDescription: \"Please use a value from LOG_LEVELS, i.e \" + \"'logLevel = workbox.core.LOG_LEVELS.debug'.\",\n          value: newLevel\n        });\n      }\n\n      setLoggerLevel(newLevel);\n    }\n  }, {\n    key: \"cacheNames\",\n    get: function get() {\n      return {\n        googleAnalytics: cacheNames.getGoogleAnalyticsName(),\n        precache: cacheNames.getPrecacheName(),\n        runtime: cacheNames.getRuntimeName()\n      };\n    }\n  }, {\n    key: \"logLevel\",\n    get: function get() {\n      return getLoggerLevel();\n    }\n  }]);\n\n  return WorkboxCore;\n}();\n\nexport default new WorkboxCore();","map":null,"metadata":{},"sourceType":"module"}