{"ast":null,"code":"import _defineProperty from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.mjs';\nimport '../_version.mjs'; // Allows minifier to mangle this name\n\nvar REVISON_IDB_FIELD = 'revision';\nvar URL_IDB_FIELD = 'url';\nvar DB_STORE_NAME = 'precached-details-models';\n/**\n * This model will track the relevant information of entries that\n * are cached and their matching revision details.\n *\n * @private\n */\n\nvar PrecachedDetailsModel = /*#__PURE__*/function () {\n  /**\n   * Construct a new model for a specific cache.\n   *\n   * @param {string} dbName\n   * @private\n   */\n  function PrecachedDetailsModel(dbName) {\n    _classCallCheck(this, PrecachedDetailsModel);\n\n    // This ensures the db name contains only letters, numbers, '-', '_' and '$'\n    var filteredDBName = dbName.replace(/[^\\w-]/g, '_');\n    this._db = new DBWrapper(filteredDBName, 2, {\n      onupgradeneeded: this._handleUpgrade\n    });\n  }\n  /**\n   * Should perform an upgrade of indexedDB.\n   *\n   * @param {Event} evt\n   *\n   * @private\n   */\n\n\n  _createClass(PrecachedDetailsModel, [{\n    key: \"_handleUpgrade\",\n    value: function _handleUpgrade(evt) {\n      var db = evt.target.result;\n\n      if (evt.oldVersion < 2) {\n        // IndexedDB version 1 used both 'workbox-precaching' and\n        // 'precached-details-model' before upgrading to version 2.\n        // Delete them and create a new store with latest schema.\n        if (db.objectStoreNames.contains('workbox-precaching')) {\n          db.deleteObjectStore('workbox-precaching');\n        }\n\n        if (db.objectStoreNames.contains(DB_STORE_NAME)) {\n          db.deleteObjectStore(DB_STORE_NAME);\n        }\n      }\n\n      db.createObjectStore(DB_STORE_NAME);\n    }\n    /**\n     * Check if an entry is already cached. Returns false if\n     * the entry isn't cached or the revision has changed.\n     *\n     * @param {string} cacheName\n     * @param {PrecacheEntry} precacheEntry\n     * @return {boolean}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_isEntryCached\",\n    value: function () {\n      var _isEntryCached2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cacheName, precacheEntry) {\n        var revisionDetails, openCache, cachedResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._getRevision(precacheEntry._entryId);\n\n              case 2:\n                revisionDetails = _context.sent;\n\n                if (!(revisionDetails !== precacheEntry._revision)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 5:\n                _context.next = 7;\n                return caches.open(cacheName);\n\n              case 7:\n                openCache = _context.sent;\n                _context.next = 10;\n                return openCache.match(precacheEntry._cacheRequest);\n\n              case 10:\n                cachedResponse = _context.sent;\n                return _context.abrupt(\"return\", !!cachedResponse);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _isEntryCached(_x, _x2) {\n        return _isEntryCached2.apply(this, arguments);\n      }\n\n      return _isEntryCached;\n    }()\n    /**\n     * @return {Promise<Array>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getAllEntries\",\n    value: function () {\n      var _getAllEntries2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._db.getAllMatching(DB_STORE_NAME, {\n                  includeKeys: true\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _getAllEntries() {\n        return _getAllEntries2.apply(this, arguments);\n      }\n\n      return _getAllEntries;\n    }()\n    /**\n     * Get the current revision details.\n     *\n     * @param {Object} entryId\n     * @return {Promise<string|null>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getRevision\",\n    value: function () {\n      var _getRevision2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(entryId) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._db.get(DB_STORE_NAME, entryId);\n\n              case 2:\n                data = _context3.sent;\n                return _context3.abrupt(\"return\", data ? data[REVISON_IDB_FIELD] : null);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _getRevision(_x3) {\n        return _getRevision2.apply(this, arguments);\n      }\n\n      return _getRevision;\n    }()\n    /**\n     * Add an entry to the details model.\n     *\n     * @param {PrecacheEntry} precacheEntry\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_addEntry\",\n    value: function () {\n      var _addEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(precacheEntry) {\n        var _this$_db$put;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._db.put(DB_STORE_NAME, (_this$_db$put = {}, _defineProperty(_this$_db$put, REVISON_IDB_FIELD, precacheEntry._revision), _defineProperty(_this$_db$put, URL_IDB_FIELD, precacheEntry._cacheRequest.url), _this$_db$put), precacheEntry._entryId);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _addEntry(_x4) {\n        return _addEntry2.apply(this, arguments);\n      }\n\n      return _addEntry;\n    }()\n    /**\n     * Delete entry from details model.\n     *\n     * @param {string} entryId\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_deleteEntry\",\n    value: function () {\n      var _deleteEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(entryId) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._db.delete(DB_STORE_NAME, entryId);\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _deleteEntry(_x5) {\n        return _deleteEntry2.apply(this, arguments);\n      }\n\n      return _deleteEntry;\n    }()\n  }]);\n\n  return PrecachedDetailsModel;\n}();\n\nexport default PrecachedDetailsModel;","map":null,"metadata":{},"sourceType":"module"}