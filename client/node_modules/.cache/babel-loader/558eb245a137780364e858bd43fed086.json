{"ast":null,"code":"import _toConsumableArray from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport LOG_LEVELS from '../models/LogLevels.mjs';\nimport '../_version.mjs'; // Safari doesn't print all console.groupCollapsed() arguments.\n// Related bug: https://bugs.webkit.org/show_bug.cgi?id=182754\n\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\nvar GREY = \"#7f8c8d\";\nvar GREEN = \"#2ecc71\";\nvar YELLOW = \"#f39c12\";\nvar RED = \"#c0392b\";\nvar BLUE = \"#3498db\";\n\nvar getDefaultLogLevel = function getDefaultLogLevel() {\n  return process.env.NODE_ENV === 'production' ? LOG_LEVELS.warn : LOG_LEVELS.log;\n};\n\nvar logLevel = getDefaultLogLevel();\n\nvar shouldPrint = function shouldPrint(minLevel) {\n  return logLevel <= minLevel;\n};\n\nvar setLoggerLevel = function setLoggerLevel(newLogLevel) {\n  return logLevel = newLogLevel;\n};\n\nvar getLoggerLevel = function getLoggerLevel() {\n  return logLevel;\n}; // We always want groups to be logged unless logLevel is silent.\n\n\nvar groupLevel = LOG_LEVELS.error;\n\nvar _print = function _print(keyName, logArgs, levelColor) {\n  var _console2;\n\n  var logLevel = keyName.indexOf('group') === 0 ? groupLevel : LOG_LEVELS[keyName];\n\n  if (!shouldPrint(logLevel)) {\n    return;\n  }\n\n  if (!levelColor || keyName === 'groupCollapsed' && isSafari) {\n    var _console;\n\n    (_console = console)[keyName].apply(_console, _toConsumableArray(logArgs));\n\n    return;\n  }\n\n  var logPrefix = ['%cworkbox', \"background: \".concat(levelColor, \"; color: white; padding: 2px 0.5em; \") + \"border-radius: 0.5em;\"];\n\n  (_console2 = console)[keyName].apply(_console2, logPrefix.concat(_toConsumableArray(logArgs)));\n};\n\nvar groupEnd = function groupEnd() {\n  if (shouldPrint(groupLevel)) {\n    console.groupEnd();\n  }\n};\n\nvar defaultExport = {\n  groupEnd: groupEnd,\n  unprefixed: {\n    groupEnd: groupEnd\n  }\n};\n\nvar setupLogs = function setupLogs(keyName, color) {\n  defaultExport[keyName] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _print(keyName, args, color);\n  };\n\n  defaultExport.unprefixed[keyName] = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _print(keyName, args);\n  };\n};\n\nvar levelToColor = {\n  debug: GREY,\n  log: GREEN,\n  warn: YELLOW,\n  error: RED,\n  groupCollapsed: BLUE\n};\nObject.keys(levelToColor).forEach(function (keyName) {\n  return setupLogs(keyName, levelToColor[keyName]);\n});\nexport { getDefaultLogLevel };\nexport { setLoggerLevel };\nexport { getLoggerLevel };\nexport { defaultExport as logger };","map":null,"metadata":{},"sourceType":"module"}