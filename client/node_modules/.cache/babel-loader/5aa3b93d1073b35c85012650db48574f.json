{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.mjs';\nimport '../_version.mjs';\n/*\n * This method returns true if the current context is a service worker.\n */\n\nvar isSwEnv = function isSwEnv(moduleName) {\n  if (!('ServiceWorkerGlobalScope' in self)) {\n    throw new WorkboxError('not-in-sw', {\n      moduleName: moduleName\n    });\n  }\n};\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\n\n\nvar isArray = function isArray(value, _ref) {\n  var moduleName = _ref.moduleName,\n      className = _ref.className,\n      funcName = _ref.funcName,\n      paramName = _ref.paramName;\n\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', {\n      moduleName: moduleName,\n      className: className,\n      funcName: funcName,\n      paramName: paramName\n    });\n  }\n};\n\nvar hasMethod = function hasMethod(object, expectedMethod, _ref2) {\n  var moduleName = _ref2.moduleName,\n      className = _ref2.className,\n      funcName = _ref2.funcName,\n      paramName = _ref2.paramName;\n  var type = typeof object[expectedMethod];\n\n  if (type !== 'function') {\n    throw new WorkboxError('missing-a-method', {\n      paramName: paramName,\n      expectedMethod: expectedMethod,\n      moduleName: moduleName,\n      className: className,\n      funcName: funcName\n    });\n  }\n};\n\nvar isType = function isType(object, expectedType, _ref3) {\n  var moduleName = _ref3.moduleName,\n      className = _ref3.className,\n      funcName = _ref3.funcName,\n      paramName = _ref3.paramName;\n\n  if (typeof object !== expectedType) {\n    throw new WorkboxError('incorrect-type', {\n      paramName: paramName,\n      expectedType: expectedType,\n      moduleName: moduleName,\n      className: className,\n      funcName: funcName\n    });\n  }\n};\n\nvar isInstance = function isInstance(object, expectedClass, _ref4) {\n  var moduleName = _ref4.moduleName,\n      className = _ref4.className,\n      funcName = _ref4.funcName,\n      paramName = _ref4.paramName,\n      isReturnValueProblem = _ref4.isReturnValueProblem;\n\n  if (!(object instanceof expectedClass)) {\n    throw new WorkboxError('incorrect-class', {\n      paramName: paramName,\n      expectedClass: expectedClass,\n      moduleName: moduleName,\n      className: className,\n      funcName: funcName,\n      isReturnValueProblem: isReturnValueProblem\n    });\n  }\n};\n\nvar isOneOf = function isOneOf(value, validValues, _ref5) {\n  var paramName = _ref5.paramName;\n\n  if (!validValues.includes(value)) {\n    throw new WorkboxError('invalid-value', {\n      paramName: paramName,\n      value: value,\n      validValueDescription: \"Valid values are \".concat(JSON.stringify(validValues), \".\")\n    });\n  }\n};\n\nvar isArrayOfClass = function isArrayOfClass(value, expectedClass, _ref6) {\n  var moduleName = _ref6.moduleName,\n      className = _ref6.className,\n      funcName = _ref6.funcName,\n      paramName = _ref6.paramName;\n  var error = new WorkboxError('not-array-of-class', {\n    value: value,\n    expectedClass: expectedClass,\n    moduleName: moduleName,\n    className: className,\n    funcName: funcName,\n    paramName: paramName\n  });\n\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n\n  var _iterator = _createForOfIteratorHelper(value),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      if (!(item instanceof expectedClass)) {\n        throw error;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod: hasMethod,\n  isArray: isArray,\n  isInstance: isInstance,\n  isOneOf: isOneOf,\n  isSwEnv: isSwEnv,\n  isType: isType,\n  isArrayOfClass: isArrayOfClass\n};\nexport { finalAssertExports as assert };","map":null,"metadata":{},"sourceType":"module"}