{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\n\nexport var addFetchListener = function addFetchListener() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ignoreURLParamet = _ref.ignoreURLParametersMatching,\n      ignoreURLParametersMatching = _ref$ignoreURLParamet === void 0 ? [/^utm_/] : _ref$ignoreURLParamet,\n      _ref$directoryIndex = _ref.directoryIndex,\n      directoryIndex = _ref$directoryIndex === void 0 ? 'index.html' : _ref$directoryIndex,\n      _ref$cleanURLs = _ref.cleanURLs,\n      cleanURLs = _ref$cleanURLs === void 0 ? true : _ref$cleanURLs,\n      urlManipulation = _ref.urlManipulation;\n\n  var cacheName = cacheNames.getPrecacheName(); // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n\n  self.addEventListener('fetch', function (event) {\n    var precachedURL = getCacheKeyForURL(event.request.url, {\n      cleanURLs: cleanURLs,\n      directoryIndex: directoryIndex,\n      ignoreURLParametersMatching: ignoreURLParametersMatching,\n      urlManipulation: urlManipulation\n    });\n\n    if (!precachedURL) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"Precaching did not find a match for \" + getFriendlyURL(event.request.url));\n      }\n\n      return;\n    }\n\n    var responsePromise = self.caches.open(cacheName).then(function (cache) {\n      return cache.match(precachedURL);\n    }).then(function (cachedResponse) {\n      if (cachedResponse) {\n        return cachedResponse;\n      } // Fall back to the network if we don't have a cached response\n      // (perhaps due to manual cache cleanup).\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        logger.warn(\"The precached response for \" + \"\".concat(getFriendlyURL(precachedURL), \" in \").concat(cacheName, \" was not found. \") + \"Falling back to the network instead.\");\n      }\n\n      return fetch(precachedURL);\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      responsePromise = responsePromise.then(function (response) {\n        // Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger.groupCollapsed(\"Precaching is responding to: \" + getFriendlyURL(event.request.url));\n        logger.log(\"Serving the precached url: \".concat(precachedURL));\n        logger.groupCollapsed(\"View request details here.\");\n        logger.log(event.request);\n        logger.groupEnd();\n        logger.groupCollapsed(\"View response details here.\");\n        logger.log(response);\n        logger.groupEnd();\n        logger.groupEnd();\n        return response;\n      });\n    }\n\n    event.respondWith(responsePromise);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}