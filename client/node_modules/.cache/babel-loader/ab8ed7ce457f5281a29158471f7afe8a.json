{"ast":null,"code":"import _regeneratorRuntime from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/krsteski/Desktop/crown-clothing-windows-189/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from './assert.js';\nimport { executeQuotaErrorCallbacks } from './executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from './getFriendlyURL.js';\nimport { logger } from './logger.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport { WorkboxError } from './WorkboxError.js';\nimport '../_version.js';\n/**\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\n * executes any of those callbacks found in sequence. The final `Request` object\n * returned by the last plugin is treated as the cache key for cache reads\n * and/or writes.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {string} options.mode\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Request>}\n *\n * @private\n * @memberof module:workbox-core\n */\n\nvar _getEffectiveRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var request, mode, _ref$plugins, plugins, cacheKeyWillBeUsedPlugins, effectiveRequest, _iterator, _step, plugin;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            request = _ref.request, mode = _ref.mode, _ref$plugins = _ref.plugins, plugins = _ref$plugins === void 0 ? [] : _ref$plugins;\n            cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, \"cacheKeyWillBeUsed\"\n            /* CACHE_KEY_WILL_BE_USED */\n            );\n            effectiveRequest = request;\n            _iterator = _createForOfIteratorHelper(cacheKeyWillBeUsedPlugins);\n            _context.prev = 4;\n\n            _iterator.s();\n\n          case 6:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 15;\n              break;\n            }\n\n            plugin = _step.value;\n            _context.next = 10;\n            return plugin[\"cacheKeyWillBeUsed\"\n            /* CACHE_KEY_WILL_BE_USED */\n            ].call(plugin, {\n              mode: mode,\n              request: effectiveRequest\n            });\n\n          case 10:\n            effectiveRequest = _context.sent;\n\n            if (typeof effectiveRequest === 'string') {\n              effectiveRequest = new Request(effectiveRequest);\n            }\n\n            if (process.env.NODE_ENV !== 'production') {\n              assert.isInstance(effectiveRequest, Request, {\n                moduleName: 'Plugin',\n                funcName: \"cacheKeyWillBeUsed\"\n                /* CACHE_KEY_WILL_BE_USED */\n                ,\n                isReturnValueProblem: true\n              });\n            }\n\n          case 13:\n            _context.next = 6;\n            break;\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](4);\n\n            _iterator.e(_context.t0);\n\n          case 20:\n            _context.prev = 20;\n\n            _iterator.f();\n\n            return _context.finish(20);\n\n          case 23:\n            return _context.abrupt(\"return\", effectiveRequest);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 17, 20, 23]]);\n  }));\n\n  return function _getEffectiveRequest(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * This method will call cacheWillUpdate on the available plugins (or use\n * status === 200) to determine if the Response is safe and valid to cache.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\n\n\nvar _isResponseSafeToCache = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n    var request, response, event, _ref3$plugins, plugins, responseToCache, pluginsUsed, _iterator2, _step2, plugin, pluginMethod;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            request = _ref3.request, response = _ref3.response, event = _ref3.event, _ref3$plugins = _ref3.plugins, plugins = _ref3$plugins === void 0 ? [] : _ref3$plugins;\n            responseToCache = response;\n            pluginsUsed = false;\n            _iterator2 = _createForOfIteratorHelper(plugins);\n            _context2.prev = 4;\n\n            _iterator2.s();\n\n          case 6:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 19;\n              break;\n            }\n\n            plugin = _step2.value;\n\n            if (!(\"cacheWillUpdate\"\n            /* CACHE_WILL_UPDATE */\n            in plugin)) {\n              _context2.next = 17;\n              break;\n            }\n\n            pluginsUsed = true;\n            pluginMethod = plugin[\"cacheWillUpdate\"\n            /* CACHE_WILL_UPDATE */\n            ];\n            _context2.next = 13;\n            return pluginMethod.call(plugin, {\n              request: request,\n              response: responseToCache,\n              event: event\n            });\n\n          case 13:\n            responseToCache = _context2.sent;\n\n            if (process.env.NODE_ENV !== 'production') {\n              if (responseToCache) {\n                assert.isInstance(responseToCache, Response, {\n                  moduleName: 'Plugin',\n                  funcName: \"cacheWillUpdate\"\n                  /* CACHE_WILL_UPDATE */\n                  ,\n                  isReturnValueProblem: true\n                });\n              }\n            }\n\n            if (responseToCache) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"break\", 19);\n\n          case 17:\n            _context2.next = 6;\n            break;\n\n          case 19:\n            _context2.next = 24;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](4);\n\n            _iterator2.e(_context2.t0);\n\n          case 24:\n            _context2.prev = 24;\n\n            _iterator2.f();\n\n            return _context2.finish(24);\n\n          case 27:\n            if (!pluginsUsed) {\n              if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                  if (responseToCache.status !== 200) {\n                    if (responseToCache.status === 0) {\n                      logger.warn(\"The response for '\".concat(request.url, \"' is an opaque \") + \"response. The caching strategy that you're using will not \" + \"cache opaque responses by default.\");\n                    } else {\n                      logger.debug(\"The response for '\".concat(request.url, \"' returned \") + \"a status code of '\".concat(response.status, \"' and won't be cached as a \") + \"result.\");\n                    }\n                  }\n                }\n              }\n\n              responseToCache = responseToCache && responseToCache.status === 200 ? responseToCache : undefined;\n            }\n\n            return _context2.abrupt(\"return\", responseToCache ? responseToCache : null);\n\n          case 29:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 21, 24, 27]]);\n  }));\n\n  return function _isResponseSafeToCache(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n/**\n * This is a wrapper around cache.match().\n *\n * @param {Object} options\n * @param {string} options.cacheName Name of the cache to match against.\n * @param {Request} options.request The Request that will be used to look up\n *     cache entries.\n * @param {Event} [options.event] The event that prompted the action.\n * @param {Object} [options.matchOptions] Options passed to cache.match().\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\n * @return {Response} A cached response if available.\n *\n * @private\n * @memberof module:workbox-core\n */\n\n\nvar matchWrapper = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref5) {\n    var cacheName, request, event, matchOptions, _ref5$plugins, plugins, cache, effectiveRequest, cachedResponse, _iterator3, _step3, plugin, pluginMethod;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            cacheName = _ref5.cacheName, request = _ref5.request, event = _ref5.event, matchOptions = _ref5.matchOptions, _ref5$plugins = _ref5.plugins, plugins = _ref5$plugins === void 0 ? [] : _ref5$plugins;\n            _context3.next = 3;\n            return self.caches.open(cacheName);\n\n          case 3:\n            cache = _context3.sent;\n            _context3.next = 6;\n            return _getEffectiveRequest({\n              plugins: plugins,\n              request: request,\n              mode: 'read'\n            });\n\n          case 6:\n            effectiveRequest = _context3.sent;\n            _context3.next = 9;\n            return cache.match(effectiveRequest, matchOptions);\n\n          case 9:\n            cachedResponse = _context3.sent;\n\n            if (process.env.NODE_ENV !== 'production') {\n              if (cachedResponse) {\n                logger.debug(\"Found a cached response in '\".concat(cacheName, \"'.\"));\n              } else {\n                logger.debug(\"No cached response found in '\".concat(cacheName, \"'.\"));\n              }\n            }\n\n            _iterator3 = _createForOfIteratorHelper(plugins);\n            _context3.prev = 12;\n\n            _iterator3.s();\n\n          case 14:\n            if ((_step3 = _iterator3.n()).done) {\n              _context3.next = 24;\n              break;\n            }\n\n            plugin = _step3.value;\n\n            if (!(\"cachedResponseWillBeUsed\"\n            /* CACHED_RESPONSE_WILL_BE_USED */\n            in plugin)) {\n              _context3.next = 22;\n              break;\n            }\n\n            pluginMethod = plugin[\"cachedResponseWillBeUsed\"\n            /* CACHED_RESPONSE_WILL_BE_USED */\n            ];\n            _context3.next = 20;\n            return pluginMethod.call(plugin, {\n              cacheName: cacheName,\n              event: event,\n              matchOptions: matchOptions,\n              cachedResponse: cachedResponse,\n              request: effectiveRequest\n            });\n\n          case 20:\n            cachedResponse = _context3.sent;\n\n            if (process.env.NODE_ENV !== 'production') {\n              if (cachedResponse) {\n                assert.isInstance(cachedResponse, Response, {\n                  moduleName: 'Plugin',\n                  funcName: \"cachedResponseWillBeUsed\"\n                  /* CACHED_RESPONSE_WILL_BE_USED */\n                  ,\n                  isReturnValueProblem: true\n                });\n              }\n            }\n\n          case 22:\n            _context3.next = 14;\n            break;\n\n          case 24:\n            _context3.next = 29;\n            break;\n\n          case 26:\n            _context3.prev = 26;\n            _context3.t0 = _context3[\"catch\"](12);\n\n            _iterator3.e(_context3.t0);\n\n          case 29:\n            _context3.prev = 29;\n\n            _iterator3.f();\n\n            return _context3.finish(29);\n\n          case 32:\n            return _context3.abrupt(\"return\", cachedResponse);\n\n          case 33:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[12, 26, 29, 32]]);\n  }));\n\n  return function matchWrapper(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n/**\n * Wrapper around cache.put().\n *\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\n * `matchOptions` when determining what the old entry is.\n *\n * @param {Object} options\n * @param {string} options.cacheName\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @param {Object} [options.matchOptions]\n *\n * @private\n * @memberof module:workbox-core\n */\n\n\nvar putWrapper = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref7) {\n    var cacheName, request, response, event, _ref7$plugins, plugins, matchOptions, effectiveRequest, responseToCache, cache, updatePlugins, oldResponse, _iterator4, _step4, plugin;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            cacheName = _ref7.cacheName, request = _ref7.request, response = _ref7.response, event = _ref7.event, _ref7$plugins = _ref7.plugins, plugins = _ref7$plugins === void 0 ? [] : _ref7$plugins, matchOptions = _ref7.matchOptions;\n\n            if (!(process.env.NODE_ENV !== 'production')) {\n              _context4.next = 4;\n              break;\n            }\n\n            if (!(request.method && request.method !== 'GET')) {\n              _context4.next = 4;\n              break;\n            }\n\n            throw new WorkboxError('attempt-to-cache-non-get-request', {\n              url: getFriendlyURL(request.url),\n              method: request.method\n            });\n\n          case 4:\n            _context4.next = 6;\n            return _getEffectiveRequest({\n              plugins: plugins,\n              request: request,\n              mode: 'write'\n            });\n\n          case 6:\n            effectiveRequest = _context4.sent;\n\n            if (response) {\n              _context4.next = 10;\n              break;\n            }\n\n            if (process.env.NODE_ENV !== 'production') {\n              logger.error(\"Cannot cache non-existent response for \" + \"'\".concat(getFriendlyURL(effectiveRequest.url), \"'.\"));\n            }\n\n            throw new WorkboxError('cache-put-with-no-response', {\n              url: getFriendlyURL(effectiveRequest.url)\n            });\n\n          case 10:\n            _context4.next = 12;\n            return _isResponseSafeToCache({\n              event: event,\n              plugins: plugins,\n              response: response,\n              request: effectiveRequest\n            });\n\n          case 12:\n            responseToCache = _context4.sent;\n\n            if (responseToCache) {\n              _context4.next = 16;\n              break;\n            }\n\n            if (process.env.NODE_ENV !== 'production') {\n              logger.debug(\"Response '\".concat(getFriendlyURL(effectiveRequest.url), \"' will \") + \"not be cached.\", responseToCache);\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 16:\n            _context4.next = 18;\n            return self.caches.open(cacheName);\n\n          case 18:\n            cache = _context4.sent;\n            updatePlugins = pluginUtils.filter(plugins, \"cacheDidUpdate\"\n            /* CACHE_DID_UPDATE */\n            );\n\n            if (!(updatePlugins.length > 0)) {\n              _context4.next = 26;\n              break;\n            }\n\n            _context4.next = 23;\n            return matchWrapper({\n              cacheName: cacheName,\n              matchOptions: matchOptions,\n              request: effectiveRequest\n            });\n\n          case 23:\n            _context4.t0 = _context4.sent;\n            _context4.next = 27;\n            break;\n\n          case 26:\n            _context4.t0 = null;\n\n          case 27:\n            oldResponse = _context4.t0;\n\n            if (process.env.NODE_ENV !== 'production') {\n              logger.debug(\"Updating the '\".concat(cacheName, \"' cache with a new Response for \") + \"\".concat(getFriendlyURL(effectiveRequest.url), \".\"));\n            }\n\n            _context4.prev = 29;\n            _context4.next = 32;\n            return cache.put(effectiveRequest, responseToCache);\n\n          case 32:\n            _context4.next = 40;\n            break;\n\n          case 34:\n            _context4.prev = 34;\n            _context4.t1 = _context4[\"catch\"](29);\n\n            if (!(_context4.t1.name === 'QuotaExceededError')) {\n              _context4.next = 39;\n              break;\n            }\n\n            _context4.next = 39;\n            return executeQuotaErrorCallbacks();\n\n          case 39:\n            throw _context4.t1;\n\n          case 40:\n            _iterator4 = _createForOfIteratorHelper(updatePlugins);\n            _context4.prev = 41;\n\n            _iterator4.s();\n\n          case 43:\n            if ((_step4 = _iterator4.n()).done) {\n              _context4.next = 49;\n              break;\n            }\n\n            plugin = _step4.value;\n            _context4.next = 47;\n            return plugin[\"cacheDidUpdate\"\n            /* CACHE_DID_UPDATE */\n            ].call(plugin, {\n              cacheName: cacheName,\n              event: event,\n              oldResponse: oldResponse,\n              newResponse: responseToCache,\n              request: effectiveRequest\n            });\n\n          case 47:\n            _context4.next = 43;\n            break;\n\n          case 49:\n            _context4.next = 54;\n            break;\n\n          case 51:\n            _context4.prev = 51;\n            _context4.t2 = _context4[\"catch\"](41);\n\n            _iterator4.e(_context4.t2);\n\n          case 54:\n            _context4.prev = 54;\n\n            _iterator4.f();\n\n            return _context4.finish(54);\n\n          case 57:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[29, 34], [41, 51, 54, 57]]);\n  }));\n\n  return function putWrapper(_x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nexport var cacheWrapper = {\n  put: putWrapper,\n  match: matchWrapper\n};","map":null,"metadata":{},"sourceType":"module"}